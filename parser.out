Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN
    BREAK
    COLON
    DEF
    EXPONENT
    FALSE
    FOR
    HASH
    IN
    IP
    LCOR
    LENGTH
    LIST
    NIL
    NOT
    POINT
    RCOR
    RETURN
    SEMICOLON
    TRUE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> expresion
Rule 2     programa -> imprimir
Rule 3     programa -> declaracion
Rule 4     programa -> sentenciaIf
Rule 5     programa -> solicitud
Rule 6     programa -> sentenciaCase
Rule 7     programa -> sentenciaWhile
Rule 8     expresion -> valor operador valor
Rule 9     expresion -> expresion_binaria
Rule 10    expresion -> expresion_par
Rule 11    expresion -> expresion_mul_div
Rule 12    expresion -> expresion_add_sub
Rule 13    expresion_binaria -> expresion operador valor
Rule 14    expresion_par -> LPAREN expresion RPAREN
Rule 15    expresion_mul_div -> expresion TIMES valor
Rule 16    expresion_mul_div -> expresion DIVIDE valor
Rule 17    expresion_add_sub -> expresion PLUS valor
Rule 18    expresion_add_sub -> expresion MINUS valor
Rule 19    imprimir -> PRINT LPAREN valores RPAREN
Rule 20    imprimir -> PRINT LPAREN RPAREN
Rule 21    valores -> valor
Rule 22    valores -> valor COMMA valores
Rule 23    sentenciaIf -> IF condicion programa ELSE programa END
Rule 24    sentenciaWhile -> WHILE condicion programa END
Rule 25    valor -> VARIABLE
Rule 26    valor -> INTEGER
Rule 27    valor -> FLOAT
Rule 28    operador -> PLUS
Rule 29    operador -> MINUS
Rule 30    operador -> TIMES
Rule 31    operador -> DIVIDE
Rule 32    condicion -> valor comparador valor
Rule 33    condicion -> condicion conector condicion
Rule 34    comparador -> LESS_THAN
Rule 35    comparador -> GREATER_THAN
Rule 36    comparador -> EQUALS
Rule 37    comparador -> NOT_EQUALS
Rule 38    comparador -> LESS_EQUAL_THAN
Rule 39    comparador -> GREATER_EQUAL_THAN
Rule 40    conector -> AND
Rule 41    conector -> OR
Rule 42    declaracion -> VARIABLE EQUAL valor
Rule 43    solicitud -> INPUT LPAREN COMILLA STRING COMILLA RPAREN
Rule 44    sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END

Terminals, with rules where they appear

AND                  : 40
BOOLEAN              : 
BREAK                : 
CASE                 : 44
COLON                : 
COMILLA              : 43 43
COMMA                : 22
DEF                  : 
DIVIDE               : 16 31
ELSE                 : 23 44
END                  : 23 24 44
EQUAL                : 42
EQUALS               : 36
EXPONENT             : 
FALSE                : 
FLOAT                : 27
FOR                  : 
GREATER_EQUAL_THAN   : 39
GREATER_THAN         : 35
HASH                 : 
IF                   : 23
IN                   : 
INPUT                : 43
INTEGER              : 26
IP                   : 
LCOR                 : 
LENGTH               : 
LESS_EQUAL_THAN      : 38
LESS_THAN            : 34
LIST                 : 
LPAREN               : 14 19 20 43
MINUS                : 18 29
NIL                  : 
NOT                  : 
NOT_EQUALS           : 37
OR                   : 41
PLUS                 : 17 28
POINT                : 
PRINT                : 19 20
RCOR                 : 
RETURN               : 
RPAREN               : 14 19 20 43
SEMICOLON            : 
STRING               : 43
TIMES                : 15 30
TRUE                 : 
VARIABLE             : 25 42
WHEN                 : 44 44
WHILE                : 24
error                : 

Nonterminals, with rules where they appear

comparador           : 32
condicion            : 23 24 33 33 44 44
conector             : 33
declaracion          : 3
expresion            : 1 13 14 15 16 17 18
expresion_add_sub    : 12
expresion_binaria    : 9
expresion_mul_div    : 11
expresion_par        : 10
imprimir             : 2
operador             : 8 13
programa             : 23 23 24 44 44 44 0
sentenciaCase        : 6
sentenciaIf          : 4
sentenciaWhile       : 7
solicitud            : 5
valor                : 8 8 13 15 16 17 18 21 22 32 32 42 44
valores              : 19 22

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . expresion
    (2) programa -> . imprimir
    (3) programa -> . declaracion
    (4) programa -> . sentenciaIf
    (5) programa -> . solicitud
    (6) programa -> . sentenciaCase
    (7) programa -> . sentenciaWhile
    (8) expresion -> . valor operador valor
    (9) expresion -> . expresion_binaria
    (10) expresion -> . expresion_par
    (11) expresion -> . expresion_mul_div
    (12) expresion -> . expresion_add_sub
    (19) imprimir -> . PRINT LPAREN valores RPAREN
    (20) imprimir -> . PRINT LPAREN RPAREN
    (42) declaracion -> . VARIABLE EQUAL valor
    (23) sentenciaIf -> . IF condicion programa ELSE programa END
    (43) solicitud -> . INPUT LPAREN COMILLA STRING COMILLA RPAREN
    (44) sentenciaCase -> . CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END
    (24) sentenciaWhile -> . WHILE condicion programa END
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT
    (13) expresion_binaria -> . expresion operador valor
    (14) expresion_par -> . LPAREN expresion RPAREN
    (15) expresion_mul_div -> . expresion TIMES valor
    (16) expresion_mul_div -> . expresion DIVIDE valor
    (17) expresion_add_sub -> . expresion PLUS valor
    (18) expresion_add_sub -> . expresion MINUS valor

    PRINT           shift and go to state 14
    VARIABLE        shift and go to state 16
    IF              shift and go to state 17
    INPUT           shift and go to state 18
    CASE            shift and go to state 19
    WHILE           shift and go to state 20
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    LPAREN          shift and go to state 15

    programa                       shift and go to state 1
    expresion                      shift and go to state 2
    imprimir                       shift and go to state 3
    declaracion                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    solicitud                      shift and go to state 6
    sentenciaCase                  shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    valor                          shift and go to state 9
    expresion_binaria              shift and go to state 10
    expresion_par                  shift and go to state 11
    expresion_mul_div              shift and go to state 12
    expresion_add_sub              shift and go to state 13

state 1

    (0) S' -> programa .



state 2

    (1) programa -> expresion .
    (13) expresion_binaria -> expresion . operador valor
    (15) expresion_mul_div -> expresion . TIMES valor
    (16) expresion_mul_div -> expresion . DIVIDE valor
    (17) expresion_add_sub -> expresion . PLUS valor
    (18) expresion_add_sub -> expresion . MINUS valor
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . TIMES
    (31) operador -> . DIVIDE

    $end            reduce using rule 1 (programa -> expresion .)
    ELSE            reduce using rule 1 (programa -> expresion .)
    END             reduce using rule 1 (programa -> expresion .)
    WHEN            reduce using rule 1 (programa -> expresion .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27

    operador                       shift and go to state 23

state 3

    (2) programa -> imprimir .

    $end            reduce using rule 2 (programa -> imprimir .)
    ELSE            reduce using rule 2 (programa -> imprimir .)
    END             reduce using rule 2 (programa -> imprimir .)
    WHEN            reduce using rule 2 (programa -> imprimir .)


state 4

    (3) programa -> declaracion .

    $end            reduce using rule 3 (programa -> declaracion .)
    ELSE            reduce using rule 3 (programa -> declaracion .)
    END             reduce using rule 3 (programa -> declaracion .)
    WHEN            reduce using rule 3 (programa -> declaracion .)


state 5

    (4) programa -> sentenciaIf .

    $end            reduce using rule 4 (programa -> sentenciaIf .)
    ELSE            reduce using rule 4 (programa -> sentenciaIf .)
    END             reduce using rule 4 (programa -> sentenciaIf .)
    WHEN            reduce using rule 4 (programa -> sentenciaIf .)


state 6

    (5) programa -> solicitud .

    $end            reduce using rule 5 (programa -> solicitud .)
    ELSE            reduce using rule 5 (programa -> solicitud .)
    END             reduce using rule 5 (programa -> solicitud .)
    WHEN            reduce using rule 5 (programa -> solicitud .)


state 7

    (6) programa -> sentenciaCase .

    $end            reduce using rule 6 (programa -> sentenciaCase .)
    ELSE            reduce using rule 6 (programa -> sentenciaCase .)
    END             reduce using rule 6 (programa -> sentenciaCase .)
    WHEN            reduce using rule 6 (programa -> sentenciaCase .)


state 8

    (7) programa -> sentenciaWhile .

    $end            reduce using rule 7 (programa -> sentenciaWhile .)
    ELSE            reduce using rule 7 (programa -> sentenciaWhile .)
    END             reduce using rule 7 (programa -> sentenciaWhile .)
    WHEN            reduce using rule 7 (programa -> sentenciaWhile .)


state 9

    (8) expresion -> valor . operador valor
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . TIMES
    (31) operador -> . DIVIDE

    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32

    operador                       shift and go to state 28

state 10

    (9) expresion -> expresion_binaria .

    TIMES           reduce using rule 9 (expresion -> expresion_binaria .)
    DIVIDE          reduce using rule 9 (expresion -> expresion_binaria .)
    PLUS            reduce using rule 9 (expresion -> expresion_binaria .)
    MINUS           reduce using rule 9 (expresion -> expresion_binaria .)
    $end            reduce using rule 9 (expresion -> expresion_binaria .)
    RPAREN          reduce using rule 9 (expresion -> expresion_binaria .)
    ELSE            reduce using rule 9 (expresion -> expresion_binaria .)
    END             reduce using rule 9 (expresion -> expresion_binaria .)
    WHEN            reduce using rule 9 (expresion -> expresion_binaria .)


state 11

    (10) expresion -> expresion_par .

    TIMES           reduce using rule 10 (expresion -> expresion_par .)
    DIVIDE          reduce using rule 10 (expresion -> expresion_par .)
    PLUS            reduce using rule 10 (expresion -> expresion_par .)
    MINUS           reduce using rule 10 (expresion -> expresion_par .)
    $end            reduce using rule 10 (expresion -> expresion_par .)
    RPAREN          reduce using rule 10 (expresion -> expresion_par .)
    ELSE            reduce using rule 10 (expresion -> expresion_par .)
    END             reduce using rule 10 (expresion -> expresion_par .)
    WHEN            reduce using rule 10 (expresion -> expresion_par .)


state 12

    (11) expresion -> expresion_mul_div .

    TIMES           reduce using rule 11 (expresion -> expresion_mul_div .)
    DIVIDE          reduce using rule 11 (expresion -> expresion_mul_div .)
    PLUS            reduce using rule 11 (expresion -> expresion_mul_div .)
    MINUS           reduce using rule 11 (expresion -> expresion_mul_div .)
    $end            reduce using rule 11 (expresion -> expresion_mul_div .)
    RPAREN          reduce using rule 11 (expresion -> expresion_mul_div .)
    ELSE            reduce using rule 11 (expresion -> expresion_mul_div .)
    END             reduce using rule 11 (expresion -> expresion_mul_div .)
    WHEN            reduce using rule 11 (expresion -> expresion_mul_div .)


state 13

    (12) expresion -> expresion_add_sub .

    TIMES           reduce using rule 12 (expresion -> expresion_add_sub .)
    DIVIDE          reduce using rule 12 (expresion -> expresion_add_sub .)
    PLUS            reduce using rule 12 (expresion -> expresion_add_sub .)
    MINUS           reduce using rule 12 (expresion -> expresion_add_sub .)
    $end            reduce using rule 12 (expresion -> expresion_add_sub .)
    RPAREN          reduce using rule 12 (expresion -> expresion_add_sub .)
    ELSE            reduce using rule 12 (expresion -> expresion_add_sub .)
    END             reduce using rule 12 (expresion -> expresion_add_sub .)
    WHEN            reduce using rule 12 (expresion -> expresion_add_sub .)


state 14

    (19) imprimir -> PRINT . LPAREN valores RPAREN
    (20) imprimir -> PRINT . LPAREN RPAREN

    LPAREN          shift and go to state 33


state 15

    (14) expresion_par -> LPAREN . expresion RPAREN
    (8) expresion -> . valor operador valor
    (9) expresion -> . expresion_binaria
    (10) expresion -> . expresion_par
    (11) expresion -> . expresion_mul_div
    (12) expresion -> . expresion_add_sub
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT
    (13) expresion_binaria -> . expresion operador valor
    (14) expresion_par -> . LPAREN expresion RPAREN
    (15) expresion_mul_div -> . expresion TIMES valor
    (16) expresion_mul_div -> . expresion DIVIDE valor
    (17) expresion_add_sub -> . expresion PLUS valor
    (18) expresion_add_sub -> . expresion MINUS valor

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    LPAREN          shift and go to state 15

    expresion                      shift and go to state 34
    valor                          shift and go to state 9
    expresion_binaria              shift and go to state 10
    expresion_par                  shift and go to state 11
    expresion_mul_div              shift and go to state 12
    expresion_add_sub              shift and go to state 13

state 16

    (42) declaracion -> VARIABLE . EQUAL valor
    (25) valor -> VARIABLE .

    EQUAL           shift and go to state 36
    PLUS            reduce using rule 25 (valor -> VARIABLE .)
    MINUS           reduce using rule 25 (valor -> VARIABLE .)
    TIMES           reduce using rule 25 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 25 (valor -> VARIABLE .)


state 17

    (23) sentenciaIf -> IF . condicion programa ELSE programa END
    (32) condicion -> . valor comparador valor
    (33) condicion -> . condicion conector condicion
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    condicion                      shift and go to state 37
    valor                          shift and go to state 38

state 18

    (43) solicitud -> INPUT . LPAREN COMILLA STRING COMILLA RPAREN

    LPAREN          shift and go to state 39


state 19

    (44) sentenciaCase -> CASE . valor WHEN condicion programa WHEN condicion programa ELSE programa END
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 40

state 20

    (24) sentenciaWhile -> WHILE . condicion programa END
    (32) condicion -> . valor comparador valor
    (33) condicion -> . condicion conector condicion
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    condicion                      shift and go to state 41
    valor                          shift and go to state 38

state 21

    (26) valor -> INTEGER .

    PLUS            reduce using rule 26 (valor -> INTEGER .)
    MINUS           reduce using rule 26 (valor -> INTEGER .)
    TIMES           reduce using rule 26 (valor -> INTEGER .)
    DIVIDE          reduce using rule 26 (valor -> INTEGER .)
    LESS_THAN       reduce using rule 26 (valor -> INTEGER .)
    GREATER_THAN    reduce using rule 26 (valor -> INTEGER .)
    EQUALS          reduce using rule 26 (valor -> INTEGER .)
    NOT_EQUALS      reduce using rule 26 (valor -> INTEGER .)
    LESS_EQUAL_THAN reduce using rule 26 (valor -> INTEGER .)
    GREATER_EQUAL_THAN reduce using rule 26 (valor -> INTEGER .)
    WHEN            reduce using rule 26 (valor -> INTEGER .)
    $end            reduce using rule 26 (valor -> INTEGER .)
    RPAREN          reduce using rule 26 (valor -> INTEGER .)
    ELSE            reduce using rule 26 (valor -> INTEGER .)
    END             reduce using rule 26 (valor -> INTEGER .)
    COMMA           reduce using rule 26 (valor -> INTEGER .)
    AND             reduce using rule 26 (valor -> INTEGER .)
    OR              reduce using rule 26 (valor -> INTEGER .)
    PRINT           reduce using rule 26 (valor -> INTEGER .)
    VARIABLE        reduce using rule 26 (valor -> INTEGER .)
    IF              reduce using rule 26 (valor -> INTEGER .)
    INPUT           reduce using rule 26 (valor -> INTEGER .)
    CASE            reduce using rule 26 (valor -> INTEGER .)
    WHILE           reduce using rule 26 (valor -> INTEGER .)
    INTEGER         reduce using rule 26 (valor -> INTEGER .)
    FLOAT           reduce using rule 26 (valor -> INTEGER .)
    LPAREN          reduce using rule 26 (valor -> INTEGER .)


state 22

    (27) valor -> FLOAT .

    PLUS            reduce using rule 27 (valor -> FLOAT .)
    MINUS           reduce using rule 27 (valor -> FLOAT .)
    TIMES           reduce using rule 27 (valor -> FLOAT .)
    DIVIDE          reduce using rule 27 (valor -> FLOAT .)
    LESS_THAN       reduce using rule 27 (valor -> FLOAT .)
    GREATER_THAN    reduce using rule 27 (valor -> FLOAT .)
    EQUALS          reduce using rule 27 (valor -> FLOAT .)
    NOT_EQUALS      reduce using rule 27 (valor -> FLOAT .)
    LESS_EQUAL_THAN reduce using rule 27 (valor -> FLOAT .)
    GREATER_EQUAL_THAN reduce using rule 27 (valor -> FLOAT .)
    WHEN            reduce using rule 27 (valor -> FLOAT .)
    $end            reduce using rule 27 (valor -> FLOAT .)
    RPAREN          reduce using rule 27 (valor -> FLOAT .)
    ELSE            reduce using rule 27 (valor -> FLOAT .)
    END             reduce using rule 27 (valor -> FLOAT .)
    COMMA           reduce using rule 27 (valor -> FLOAT .)
    AND             reduce using rule 27 (valor -> FLOAT .)
    OR              reduce using rule 27 (valor -> FLOAT .)
    PRINT           reduce using rule 27 (valor -> FLOAT .)
    VARIABLE        reduce using rule 27 (valor -> FLOAT .)
    IF              reduce using rule 27 (valor -> FLOAT .)
    INPUT           reduce using rule 27 (valor -> FLOAT .)
    CASE            reduce using rule 27 (valor -> FLOAT .)
    WHILE           reduce using rule 27 (valor -> FLOAT .)
    INTEGER         reduce using rule 27 (valor -> FLOAT .)
    FLOAT           reduce using rule 27 (valor -> FLOAT .)
    LPAREN          reduce using rule 27 (valor -> FLOAT .)


state 23

    (13) expresion_binaria -> expresion operador . valor
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 42

state 24

    (15) expresion_mul_div -> expresion TIMES . valor
    (30) operador -> TIMES .
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

  ! VARIABLE        [ reduce using rule 30 (operador -> TIMES .) ]
  ! INTEGER         [ reduce using rule 30 (operador -> TIMES .) ]
  ! FLOAT           [ reduce using rule 30 (operador -> TIMES .) ]

    valor                          shift and go to state 43

state 25

    (16) expresion_mul_div -> expresion DIVIDE . valor
    (31) operador -> DIVIDE .
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

  ! VARIABLE        [ reduce using rule 31 (operador -> DIVIDE .) ]
  ! INTEGER         [ reduce using rule 31 (operador -> DIVIDE .) ]
  ! FLOAT           [ reduce using rule 31 (operador -> DIVIDE .) ]

    valor                          shift and go to state 44

state 26

    (17) expresion_add_sub -> expresion PLUS . valor
    (28) operador -> PLUS .
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

  ! VARIABLE        [ reduce using rule 28 (operador -> PLUS .) ]
  ! INTEGER         [ reduce using rule 28 (operador -> PLUS .) ]
  ! FLOAT           [ reduce using rule 28 (operador -> PLUS .) ]

    valor                          shift and go to state 45

state 27

    (18) expresion_add_sub -> expresion MINUS . valor
    (29) operador -> MINUS .
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

  ! VARIABLE        [ reduce using rule 29 (operador -> MINUS .) ]
  ! INTEGER         [ reduce using rule 29 (operador -> MINUS .) ]
  ! FLOAT           [ reduce using rule 29 (operador -> MINUS .) ]

    valor                          shift and go to state 46

state 28

    (8) expresion -> valor operador . valor
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 47

state 29

    (28) operador -> PLUS .

    VARIABLE        reduce using rule 28 (operador -> PLUS .)
    INTEGER         reduce using rule 28 (operador -> PLUS .)
    FLOAT           reduce using rule 28 (operador -> PLUS .)


state 30

    (29) operador -> MINUS .

    VARIABLE        reduce using rule 29 (operador -> MINUS .)
    INTEGER         reduce using rule 29 (operador -> MINUS .)
    FLOAT           reduce using rule 29 (operador -> MINUS .)


state 31

    (30) operador -> TIMES .

    VARIABLE        reduce using rule 30 (operador -> TIMES .)
    INTEGER         reduce using rule 30 (operador -> TIMES .)
    FLOAT           reduce using rule 30 (operador -> TIMES .)


state 32

    (31) operador -> DIVIDE .

    VARIABLE        reduce using rule 31 (operador -> DIVIDE .)
    INTEGER         reduce using rule 31 (operador -> DIVIDE .)
    FLOAT           reduce using rule 31 (operador -> DIVIDE .)


state 33

    (19) imprimir -> PRINT LPAREN . valores RPAREN
    (20) imprimir -> PRINT LPAREN . RPAREN
    (21) valores -> . valor
    (22) valores -> . valor COMMA valores
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    RPAREN          shift and go to state 49
    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    valores                        shift and go to state 48
    valor                          shift and go to state 50

state 34

    (14) expresion_par -> LPAREN expresion . RPAREN
    (13) expresion_binaria -> expresion . operador valor
    (15) expresion_mul_div -> expresion . TIMES valor
    (16) expresion_mul_div -> expresion . DIVIDE valor
    (17) expresion_add_sub -> expresion . PLUS valor
    (18) expresion_add_sub -> expresion . MINUS valor
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . TIMES
    (31) operador -> . DIVIDE

    RPAREN          shift and go to state 51
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27

    operador                       shift and go to state 23

state 35

    (25) valor -> VARIABLE .

    PLUS            reduce using rule 25 (valor -> VARIABLE .)
    MINUS           reduce using rule 25 (valor -> VARIABLE .)
    TIMES           reduce using rule 25 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 25 (valor -> VARIABLE .)
    LESS_THAN       reduce using rule 25 (valor -> VARIABLE .)
    GREATER_THAN    reduce using rule 25 (valor -> VARIABLE .)
    EQUALS          reduce using rule 25 (valor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 25 (valor -> VARIABLE .)
    LESS_EQUAL_THAN reduce using rule 25 (valor -> VARIABLE .)
    GREATER_EQUAL_THAN reduce using rule 25 (valor -> VARIABLE .)
    WHEN            reduce using rule 25 (valor -> VARIABLE .)
    $end            reduce using rule 25 (valor -> VARIABLE .)
    RPAREN          reduce using rule 25 (valor -> VARIABLE .)
    ELSE            reduce using rule 25 (valor -> VARIABLE .)
    END             reduce using rule 25 (valor -> VARIABLE .)
    COMMA           reduce using rule 25 (valor -> VARIABLE .)
    AND             reduce using rule 25 (valor -> VARIABLE .)
    OR              reduce using rule 25 (valor -> VARIABLE .)
    PRINT           reduce using rule 25 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 25 (valor -> VARIABLE .)
    IF              reduce using rule 25 (valor -> VARIABLE .)
    INPUT           reduce using rule 25 (valor -> VARIABLE .)
    CASE            reduce using rule 25 (valor -> VARIABLE .)
    WHILE           reduce using rule 25 (valor -> VARIABLE .)
    INTEGER         reduce using rule 25 (valor -> VARIABLE .)
    FLOAT           reduce using rule 25 (valor -> VARIABLE .)
    LPAREN          reduce using rule 25 (valor -> VARIABLE .)


state 36

    (42) declaracion -> VARIABLE EQUAL . valor
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 52

state 37

    (23) sentenciaIf -> IF condicion . programa ELSE programa END
    (33) condicion -> condicion . conector condicion
    (1) programa -> . expresion
    (2) programa -> . imprimir
    (3) programa -> . declaracion
    (4) programa -> . sentenciaIf
    (5) programa -> . solicitud
    (6) programa -> . sentenciaCase
    (7) programa -> . sentenciaWhile
    (40) conector -> . AND
    (41) conector -> . OR
    (8) expresion -> . valor operador valor
    (9) expresion -> . expresion_binaria
    (10) expresion -> . expresion_par
    (11) expresion -> . expresion_mul_div
    (12) expresion -> . expresion_add_sub
    (19) imprimir -> . PRINT LPAREN valores RPAREN
    (20) imprimir -> . PRINT LPAREN RPAREN
    (42) declaracion -> . VARIABLE EQUAL valor
    (23) sentenciaIf -> . IF condicion programa ELSE programa END
    (43) solicitud -> . INPUT LPAREN COMILLA STRING COMILLA RPAREN
    (44) sentenciaCase -> . CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END
    (24) sentenciaWhile -> . WHILE condicion programa END
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT
    (13) expresion_binaria -> . expresion operador valor
    (14) expresion_par -> . LPAREN expresion RPAREN
    (15) expresion_mul_div -> . expresion TIMES valor
    (16) expresion_mul_div -> . expresion DIVIDE valor
    (17) expresion_add_sub -> . expresion PLUS valor
    (18) expresion_add_sub -> . expresion MINUS valor

    AND             shift and go to state 55
    OR              shift and go to state 56
    PRINT           shift and go to state 14
    VARIABLE        shift and go to state 16
    IF              shift and go to state 17
    INPUT           shift and go to state 18
    CASE            shift and go to state 19
    WHILE           shift and go to state 20
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    LPAREN          shift and go to state 15

    programa                       shift and go to state 53
    conector                       shift and go to state 54
    expresion                      shift and go to state 2
    imprimir                       shift and go to state 3
    declaracion                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    solicitud                      shift and go to state 6
    sentenciaCase                  shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    valor                          shift and go to state 9
    expresion_binaria              shift and go to state 10
    expresion_par                  shift and go to state 11
    expresion_mul_div              shift and go to state 12
    expresion_add_sub              shift and go to state 13

state 38

    (32) condicion -> valor . comparador valor
    (34) comparador -> . LESS_THAN
    (35) comparador -> . GREATER_THAN
    (36) comparador -> . EQUALS
    (37) comparador -> . NOT_EQUALS
    (38) comparador -> . LESS_EQUAL_THAN
    (39) comparador -> . GREATER_EQUAL_THAN

    LESS_THAN       shift and go to state 58
    GREATER_THAN    shift and go to state 59
    EQUALS          shift and go to state 60
    NOT_EQUALS      shift and go to state 61
    LESS_EQUAL_THAN shift and go to state 62
    GREATER_EQUAL_THAN shift and go to state 63

    comparador                     shift and go to state 57

state 39

    (43) solicitud -> INPUT LPAREN . COMILLA STRING COMILLA RPAREN

    COMILLA         shift and go to state 64


state 40

    (44) sentenciaCase -> CASE valor . WHEN condicion programa WHEN condicion programa ELSE programa END

    WHEN            shift and go to state 65


state 41

    (24) sentenciaWhile -> WHILE condicion . programa END
    (33) condicion -> condicion . conector condicion
    (1) programa -> . expresion
    (2) programa -> . imprimir
    (3) programa -> . declaracion
    (4) programa -> . sentenciaIf
    (5) programa -> . solicitud
    (6) programa -> . sentenciaCase
    (7) programa -> . sentenciaWhile
    (40) conector -> . AND
    (41) conector -> . OR
    (8) expresion -> . valor operador valor
    (9) expresion -> . expresion_binaria
    (10) expresion -> . expresion_par
    (11) expresion -> . expresion_mul_div
    (12) expresion -> . expresion_add_sub
    (19) imprimir -> . PRINT LPAREN valores RPAREN
    (20) imprimir -> . PRINT LPAREN RPAREN
    (42) declaracion -> . VARIABLE EQUAL valor
    (23) sentenciaIf -> . IF condicion programa ELSE programa END
    (43) solicitud -> . INPUT LPAREN COMILLA STRING COMILLA RPAREN
    (44) sentenciaCase -> . CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END
    (24) sentenciaWhile -> . WHILE condicion programa END
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT
    (13) expresion_binaria -> . expresion operador valor
    (14) expresion_par -> . LPAREN expresion RPAREN
    (15) expresion_mul_div -> . expresion TIMES valor
    (16) expresion_mul_div -> . expresion DIVIDE valor
    (17) expresion_add_sub -> . expresion PLUS valor
    (18) expresion_add_sub -> . expresion MINUS valor

    AND             shift and go to state 55
    OR              shift and go to state 56
    PRINT           shift and go to state 14
    VARIABLE        shift and go to state 16
    IF              shift and go to state 17
    INPUT           shift and go to state 18
    CASE            shift and go to state 19
    WHILE           shift and go to state 20
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    LPAREN          shift and go to state 15

    programa                       shift and go to state 66
    conector                       shift and go to state 54
    expresion                      shift and go to state 2
    imprimir                       shift and go to state 3
    declaracion                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    solicitud                      shift and go to state 6
    sentenciaCase                  shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    valor                          shift and go to state 9
    expresion_binaria              shift and go to state 10
    expresion_par                  shift and go to state 11
    expresion_mul_div              shift and go to state 12
    expresion_add_sub              shift and go to state 13

state 42

    (13) expresion_binaria -> expresion operador valor .

    TIMES           reduce using rule 13 (expresion_binaria -> expresion operador valor .)
    DIVIDE          reduce using rule 13 (expresion_binaria -> expresion operador valor .)
    PLUS            reduce using rule 13 (expresion_binaria -> expresion operador valor .)
    MINUS           reduce using rule 13 (expresion_binaria -> expresion operador valor .)
    $end            reduce using rule 13 (expresion_binaria -> expresion operador valor .)
    RPAREN          reduce using rule 13 (expresion_binaria -> expresion operador valor .)
    ELSE            reduce using rule 13 (expresion_binaria -> expresion operador valor .)
    END             reduce using rule 13 (expresion_binaria -> expresion operador valor .)
    WHEN            reduce using rule 13 (expresion_binaria -> expresion operador valor .)


state 43

    (15) expresion_mul_div -> expresion TIMES valor .

    TIMES           reduce using rule 15 (expresion_mul_div -> expresion TIMES valor .)
    DIVIDE          reduce using rule 15 (expresion_mul_div -> expresion TIMES valor .)
    PLUS            reduce using rule 15 (expresion_mul_div -> expresion TIMES valor .)
    MINUS           reduce using rule 15 (expresion_mul_div -> expresion TIMES valor .)
    $end            reduce using rule 15 (expresion_mul_div -> expresion TIMES valor .)
    RPAREN          reduce using rule 15 (expresion_mul_div -> expresion TIMES valor .)
    ELSE            reduce using rule 15 (expresion_mul_div -> expresion TIMES valor .)
    END             reduce using rule 15 (expresion_mul_div -> expresion TIMES valor .)
    WHEN            reduce using rule 15 (expresion_mul_div -> expresion TIMES valor .)


state 44

    (16) expresion_mul_div -> expresion DIVIDE valor .

    TIMES           reduce using rule 16 (expresion_mul_div -> expresion DIVIDE valor .)
    DIVIDE          reduce using rule 16 (expresion_mul_div -> expresion DIVIDE valor .)
    PLUS            reduce using rule 16 (expresion_mul_div -> expresion DIVIDE valor .)
    MINUS           reduce using rule 16 (expresion_mul_div -> expresion DIVIDE valor .)
    $end            reduce using rule 16 (expresion_mul_div -> expresion DIVIDE valor .)
    RPAREN          reduce using rule 16 (expresion_mul_div -> expresion DIVIDE valor .)
    ELSE            reduce using rule 16 (expresion_mul_div -> expresion DIVIDE valor .)
    END             reduce using rule 16 (expresion_mul_div -> expresion DIVIDE valor .)
    WHEN            reduce using rule 16 (expresion_mul_div -> expresion DIVIDE valor .)


state 45

    (17) expresion_add_sub -> expresion PLUS valor .

    TIMES           reduce using rule 17 (expresion_add_sub -> expresion PLUS valor .)
    DIVIDE          reduce using rule 17 (expresion_add_sub -> expresion PLUS valor .)
    PLUS            reduce using rule 17 (expresion_add_sub -> expresion PLUS valor .)
    MINUS           reduce using rule 17 (expresion_add_sub -> expresion PLUS valor .)
    $end            reduce using rule 17 (expresion_add_sub -> expresion PLUS valor .)
    RPAREN          reduce using rule 17 (expresion_add_sub -> expresion PLUS valor .)
    ELSE            reduce using rule 17 (expresion_add_sub -> expresion PLUS valor .)
    END             reduce using rule 17 (expresion_add_sub -> expresion PLUS valor .)
    WHEN            reduce using rule 17 (expresion_add_sub -> expresion PLUS valor .)


state 46

    (18) expresion_add_sub -> expresion MINUS valor .

    TIMES           reduce using rule 18 (expresion_add_sub -> expresion MINUS valor .)
    DIVIDE          reduce using rule 18 (expresion_add_sub -> expresion MINUS valor .)
    PLUS            reduce using rule 18 (expresion_add_sub -> expresion MINUS valor .)
    MINUS           reduce using rule 18 (expresion_add_sub -> expresion MINUS valor .)
    $end            reduce using rule 18 (expresion_add_sub -> expresion MINUS valor .)
    RPAREN          reduce using rule 18 (expresion_add_sub -> expresion MINUS valor .)
    ELSE            reduce using rule 18 (expresion_add_sub -> expresion MINUS valor .)
    END             reduce using rule 18 (expresion_add_sub -> expresion MINUS valor .)
    WHEN            reduce using rule 18 (expresion_add_sub -> expresion MINUS valor .)


state 47

    (8) expresion -> valor operador valor .

    TIMES           reduce using rule 8 (expresion -> valor operador valor .)
    DIVIDE          reduce using rule 8 (expresion -> valor operador valor .)
    PLUS            reduce using rule 8 (expresion -> valor operador valor .)
    MINUS           reduce using rule 8 (expresion -> valor operador valor .)
    $end            reduce using rule 8 (expresion -> valor operador valor .)
    RPAREN          reduce using rule 8 (expresion -> valor operador valor .)
    ELSE            reduce using rule 8 (expresion -> valor operador valor .)
    END             reduce using rule 8 (expresion -> valor operador valor .)
    WHEN            reduce using rule 8 (expresion -> valor operador valor .)


state 48

    (19) imprimir -> PRINT LPAREN valores . RPAREN

    RPAREN          shift and go to state 67


state 49

    (20) imprimir -> PRINT LPAREN RPAREN .

    $end            reduce using rule 20 (imprimir -> PRINT LPAREN RPAREN .)
    ELSE            reduce using rule 20 (imprimir -> PRINT LPAREN RPAREN .)
    END             reduce using rule 20 (imprimir -> PRINT LPAREN RPAREN .)
    WHEN            reduce using rule 20 (imprimir -> PRINT LPAREN RPAREN .)


state 50

    (21) valores -> valor .
    (22) valores -> valor . COMMA valores

    RPAREN          reduce using rule 21 (valores -> valor .)
    COMMA           shift and go to state 68


state 51

    (14) expresion_par -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 14 (expresion_par -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 14 (expresion_par -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 14 (expresion_par -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 14 (expresion_par -> LPAREN expresion RPAREN .)
    $end            reduce using rule 14 (expresion_par -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 14 (expresion_par -> LPAREN expresion RPAREN .)
    ELSE            reduce using rule 14 (expresion_par -> LPAREN expresion RPAREN .)
    END             reduce using rule 14 (expresion_par -> LPAREN expresion RPAREN .)
    WHEN            reduce using rule 14 (expresion_par -> LPAREN expresion RPAREN .)


state 52

    (42) declaracion -> VARIABLE EQUAL valor .

    $end            reduce using rule 42 (declaracion -> VARIABLE EQUAL valor .)
    ELSE            reduce using rule 42 (declaracion -> VARIABLE EQUAL valor .)
    END             reduce using rule 42 (declaracion -> VARIABLE EQUAL valor .)
    WHEN            reduce using rule 42 (declaracion -> VARIABLE EQUAL valor .)


state 53

    (23) sentenciaIf -> IF condicion programa . ELSE programa END

    ELSE            shift and go to state 69


state 54

    (33) condicion -> condicion conector . condicion
    (32) condicion -> . valor comparador valor
    (33) condicion -> . condicion conector condicion
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    condicion                      shift and go to state 70
    valor                          shift and go to state 38

state 55

    (40) conector -> AND .

    VARIABLE        reduce using rule 40 (conector -> AND .)
    INTEGER         reduce using rule 40 (conector -> AND .)
    FLOAT           reduce using rule 40 (conector -> AND .)


state 56

    (41) conector -> OR .

    VARIABLE        reduce using rule 41 (conector -> OR .)
    INTEGER         reduce using rule 41 (conector -> OR .)
    FLOAT           reduce using rule 41 (conector -> OR .)


state 57

    (32) condicion -> valor comparador . valor
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 71

state 58

    (34) comparador -> LESS_THAN .

    VARIABLE        reduce using rule 34 (comparador -> LESS_THAN .)
    INTEGER         reduce using rule 34 (comparador -> LESS_THAN .)
    FLOAT           reduce using rule 34 (comparador -> LESS_THAN .)


state 59

    (35) comparador -> GREATER_THAN .

    VARIABLE        reduce using rule 35 (comparador -> GREATER_THAN .)
    INTEGER         reduce using rule 35 (comparador -> GREATER_THAN .)
    FLOAT           reduce using rule 35 (comparador -> GREATER_THAN .)


state 60

    (36) comparador -> EQUALS .

    VARIABLE        reduce using rule 36 (comparador -> EQUALS .)
    INTEGER         reduce using rule 36 (comparador -> EQUALS .)
    FLOAT           reduce using rule 36 (comparador -> EQUALS .)


state 61

    (37) comparador -> NOT_EQUALS .

    VARIABLE        reduce using rule 37 (comparador -> NOT_EQUALS .)
    INTEGER         reduce using rule 37 (comparador -> NOT_EQUALS .)
    FLOAT           reduce using rule 37 (comparador -> NOT_EQUALS .)


state 62

    (38) comparador -> LESS_EQUAL_THAN .

    VARIABLE        reduce using rule 38 (comparador -> LESS_EQUAL_THAN .)
    INTEGER         reduce using rule 38 (comparador -> LESS_EQUAL_THAN .)
    FLOAT           reduce using rule 38 (comparador -> LESS_EQUAL_THAN .)


state 63

    (39) comparador -> GREATER_EQUAL_THAN .

    VARIABLE        reduce using rule 39 (comparador -> GREATER_EQUAL_THAN .)
    INTEGER         reduce using rule 39 (comparador -> GREATER_EQUAL_THAN .)
    FLOAT           reduce using rule 39 (comparador -> GREATER_EQUAL_THAN .)


state 64

    (43) solicitud -> INPUT LPAREN COMILLA . STRING COMILLA RPAREN

    STRING          shift and go to state 72


state 65

    (44) sentenciaCase -> CASE valor WHEN . condicion programa WHEN condicion programa ELSE programa END
    (32) condicion -> . valor comparador valor
    (33) condicion -> . condicion conector condicion
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 38
    condicion                      shift and go to state 73

state 66

    (24) sentenciaWhile -> WHILE condicion programa . END

    END             shift and go to state 74


state 67

    (19) imprimir -> PRINT LPAREN valores RPAREN .

    $end            reduce using rule 19 (imprimir -> PRINT LPAREN valores RPAREN .)
    ELSE            reduce using rule 19 (imprimir -> PRINT LPAREN valores RPAREN .)
    END             reduce using rule 19 (imprimir -> PRINT LPAREN valores RPAREN .)
    WHEN            reduce using rule 19 (imprimir -> PRINT LPAREN valores RPAREN .)


state 68

    (22) valores -> valor COMMA . valores
    (21) valores -> . valor
    (22) valores -> . valor COMMA valores
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 50
    valores                        shift and go to state 75

state 69

    (23) sentenciaIf -> IF condicion programa ELSE . programa END
    (1) programa -> . expresion
    (2) programa -> . imprimir
    (3) programa -> . declaracion
    (4) programa -> . sentenciaIf
    (5) programa -> . solicitud
    (6) programa -> . sentenciaCase
    (7) programa -> . sentenciaWhile
    (8) expresion -> . valor operador valor
    (9) expresion -> . expresion_binaria
    (10) expresion -> . expresion_par
    (11) expresion -> . expresion_mul_div
    (12) expresion -> . expresion_add_sub
    (19) imprimir -> . PRINT LPAREN valores RPAREN
    (20) imprimir -> . PRINT LPAREN RPAREN
    (42) declaracion -> . VARIABLE EQUAL valor
    (23) sentenciaIf -> . IF condicion programa ELSE programa END
    (43) solicitud -> . INPUT LPAREN COMILLA STRING COMILLA RPAREN
    (44) sentenciaCase -> . CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END
    (24) sentenciaWhile -> . WHILE condicion programa END
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT
    (13) expresion_binaria -> . expresion operador valor
    (14) expresion_par -> . LPAREN expresion RPAREN
    (15) expresion_mul_div -> . expresion TIMES valor
    (16) expresion_mul_div -> . expresion DIVIDE valor
    (17) expresion_add_sub -> . expresion PLUS valor
    (18) expresion_add_sub -> . expresion MINUS valor

    PRINT           shift and go to state 14
    VARIABLE        shift and go to state 16
    IF              shift and go to state 17
    INPUT           shift and go to state 18
    CASE            shift and go to state 19
    WHILE           shift and go to state 20
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    LPAREN          shift and go to state 15

    programa                       shift and go to state 76
    expresion                      shift and go to state 2
    imprimir                       shift and go to state 3
    declaracion                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    solicitud                      shift and go to state 6
    sentenciaCase                  shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    valor                          shift and go to state 9
    expresion_binaria              shift and go to state 10
    expresion_par                  shift and go to state 11
    expresion_mul_div              shift and go to state 12
    expresion_add_sub              shift and go to state 13

state 70

    (33) condicion -> condicion conector condicion .
    (33) condicion -> condicion . conector condicion
    (40) conector -> . AND
    (41) conector -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PRINT           reduce using rule 33 (condicion -> condicion conector condicion .)
    VARIABLE        reduce using rule 33 (condicion -> condicion conector condicion .)
    IF              reduce using rule 33 (condicion -> condicion conector condicion .)
    INPUT           reduce using rule 33 (condicion -> condicion conector condicion .)
    CASE            reduce using rule 33 (condicion -> condicion conector condicion .)
    WHILE           reduce using rule 33 (condicion -> condicion conector condicion .)
    INTEGER         reduce using rule 33 (condicion -> condicion conector condicion .)
    FLOAT           reduce using rule 33 (condicion -> condicion conector condicion .)
    LPAREN          reduce using rule 33 (condicion -> condicion conector condicion .)
    AND             shift and go to state 55
    OR              shift and go to state 56

  ! AND             [ reduce using rule 33 (condicion -> condicion conector condicion .) ]
  ! OR              [ reduce using rule 33 (condicion -> condicion conector condicion .) ]

    conector                       shift and go to state 54

state 71

    (32) condicion -> valor comparador valor .

    AND             reduce using rule 32 (condicion -> valor comparador valor .)
    OR              reduce using rule 32 (condicion -> valor comparador valor .)
    PRINT           reduce using rule 32 (condicion -> valor comparador valor .)
    VARIABLE        reduce using rule 32 (condicion -> valor comparador valor .)
    IF              reduce using rule 32 (condicion -> valor comparador valor .)
    INPUT           reduce using rule 32 (condicion -> valor comparador valor .)
    CASE            reduce using rule 32 (condicion -> valor comparador valor .)
    WHILE           reduce using rule 32 (condicion -> valor comparador valor .)
    INTEGER         reduce using rule 32 (condicion -> valor comparador valor .)
    FLOAT           reduce using rule 32 (condicion -> valor comparador valor .)
    LPAREN          reduce using rule 32 (condicion -> valor comparador valor .)


state 72

    (43) solicitud -> INPUT LPAREN COMILLA STRING . COMILLA RPAREN

    COMILLA         shift and go to state 77


state 73

    (44) sentenciaCase -> CASE valor WHEN condicion . programa WHEN condicion programa ELSE programa END
    (33) condicion -> condicion . conector condicion
    (1) programa -> . expresion
    (2) programa -> . imprimir
    (3) programa -> . declaracion
    (4) programa -> . sentenciaIf
    (5) programa -> . solicitud
    (6) programa -> . sentenciaCase
    (7) programa -> . sentenciaWhile
    (40) conector -> . AND
    (41) conector -> . OR
    (8) expresion -> . valor operador valor
    (9) expresion -> . expresion_binaria
    (10) expresion -> . expresion_par
    (11) expresion -> . expresion_mul_div
    (12) expresion -> . expresion_add_sub
    (19) imprimir -> . PRINT LPAREN valores RPAREN
    (20) imprimir -> . PRINT LPAREN RPAREN
    (42) declaracion -> . VARIABLE EQUAL valor
    (23) sentenciaIf -> . IF condicion programa ELSE programa END
    (43) solicitud -> . INPUT LPAREN COMILLA STRING COMILLA RPAREN
    (44) sentenciaCase -> . CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END
    (24) sentenciaWhile -> . WHILE condicion programa END
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT
    (13) expresion_binaria -> . expresion operador valor
    (14) expresion_par -> . LPAREN expresion RPAREN
    (15) expresion_mul_div -> . expresion TIMES valor
    (16) expresion_mul_div -> . expresion DIVIDE valor
    (17) expresion_add_sub -> . expresion PLUS valor
    (18) expresion_add_sub -> . expresion MINUS valor

    AND             shift and go to state 55
    OR              shift and go to state 56
    PRINT           shift and go to state 14
    VARIABLE        shift and go to state 16
    IF              shift and go to state 17
    INPUT           shift and go to state 18
    CASE            shift and go to state 19
    WHILE           shift and go to state 20
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    LPAREN          shift and go to state 15

    valor                          shift and go to state 9
    programa                       shift and go to state 78
    conector                       shift and go to state 54
    expresion                      shift and go to state 2
    imprimir                       shift and go to state 3
    declaracion                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    solicitud                      shift and go to state 6
    sentenciaCase                  shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    expresion_binaria              shift and go to state 10
    expresion_par                  shift and go to state 11
    expresion_mul_div              shift and go to state 12
    expresion_add_sub              shift and go to state 13

state 74

    (24) sentenciaWhile -> WHILE condicion programa END .

    $end            reduce using rule 24 (sentenciaWhile -> WHILE condicion programa END .)
    ELSE            reduce using rule 24 (sentenciaWhile -> WHILE condicion programa END .)
    END             reduce using rule 24 (sentenciaWhile -> WHILE condicion programa END .)
    WHEN            reduce using rule 24 (sentenciaWhile -> WHILE condicion programa END .)


state 75

    (22) valores -> valor COMMA valores .

    RPAREN          reduce using rule 22 (valores -> valor COMMA valores .)


state 76

    (23) sentenciaIf -> IF condicion programa ELSE programa . END

    END             shift and go to state 79


state 77

    (43) solicitud -> INPUT LPAREN COMILLA STRING COMILLA . RPAREN

    RPAREN          shift and go to state 80


state 78

    (44) sentenciaCase -> CASE valor WHEN condicion programa . WHEN condicion programa ELSE programa END

    WHEN            shift and go to state 81


state 79

    (23) sentenciaIf -> IF condicion programa ELSE programa END .

    $end            reduce using rule 23 (sentenciaIf -> IF condicion programa ELSE programa END .)
    ELSE            reduce using rule 23 (sentenciaIf -> IF condicion programa ELSE programa END .)
    END             reduce using rule 23 (sentenciaIf -> IF condicion programa ELSE programa END .)
    WHEN            reduce using rule 23 (sentenciaIf -> IF condicion programa ELSE programa END .)


state 80

    (43) solicitud -> INPUT LPAREN COMILLA STRING COMILLA RPAREN .

    $end            reduce using rule 43 (solicitud -> INPUT LPAREN COMILLA STRING COMILLA RPAREN .)
    ELSE            reduce using rule 43 (solicitud -> INPUT LPAREN COMILLA STRING COMILLA RPAREN .)
    END             reduce using rule 43 (solicitud -> INPUT LPAREN COMILLA STRING COMILLA RPAREN .)
    WHEN            reduce using rule 43 (solicitud -> INPUT LPAREN COMILLA STRING COMILLA RPAREN .)


state 81

    (44) sentenciaCase -> CASE valor WHEN condicion programa WHEN . condicion programa ELSE programa END
    (32) condicion -> . valor comparador valor
    (33) condicion -> . condicion conector condicion
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT

    VARIABLE        shift and go to state 35
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 38
    condicion                      shift and go to state 82

state 82

    (44) sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion . programa ELSE programa END
    (33) condicion -> condicion . conector condicion
    (1) programa -> . expresion
    (2) programa -> . imprimir
    (3) programa -> . declaracion
    (4) programa -> . sentenciaIf
    (5) programa -> . solicitud
    (6) programa -> . sentenciaCase
    (7) programa -> . sentenciaWhile
    (40) conector -> . AND
    (41) conector -> . OR
    (8) expresion -> . valor operador valor
    (9) expresion -> . expresion_binaria
    (10) expresion -> . expresion_par
    (11) expresion -> . expresion_mul_div
    (12) expresion -> . expresion_add_sub
    (19) imprimir -> . PRINT LPAREN valores RPAREN
    (20) imprimir -> . PRINT LPAREN RPAREN
    (42) declaracion -> . VARIABLE EQUAL valor
    (23) sentenciaIf -> . IF condicion programa ELSE programa END
    (43) solicitud -> . INPUT LPAREN COMILLA STRING COMILLA RPAREN
    (44) sentenciaCase -> . CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END
    (24) sentenciaWhile -> . WHILE condicion programa END
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT
    (13) expresion_binaria -> . expresion operador valor
    (14) expresion_par -> . LPAREN expresion RPAREN
    (15) expresion_mul_div -> . expresion TIMES valor
    (16) expresion_mul_div -> . expresion DIVIDE valor
    (17) expresion_add_sub -> . expresion PLUS valor
    (18) expresion_add_sub -> . expresion MINUS valor

    AND             shift and go to state 55
    OR              shift and go to state 56
    PRINT           shift and go to state 14
    VARIABLE        shift and go to state 16
    IF              shift and go to state 17
    INPUT           shift and go to state 18
    CASE            shift and go to state 19
    WHILE           shift and go to state 20
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    LPAREN          shift and go to state 15

    valor                          shift and go to state 9
    programa                       shift and go to state 83
    conector                       shift and go to state 54
    expresion                      shift and go to state 2
    imprimir                       shift and go to state 3
    declaracion                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    solicitud                      shift and go to state 6
    sentenciaCase                  shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    expresion_binaria              shift and go to state 10
    expresion_par                  shift and go to state 11
    expresion_mul_div              shift and go to state 12
    expresion_add_sub              shift and go to state 13

state 83

    (44) sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion programa . ELSE programa END

    ELSE            shift and go to state 84


state 84

    (44) sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion programa ELSE . programa END
    (1) programa -> . expresion
    (2) programa -> . imprimir
    (3) programa -> . declaracion
    (4) programa -> . sentenciaIf
    (5) programa -> . solicitud
    (6) programa -> . sentenciaCase
    (7) programa -> . sentenciaWhile
    (8) expresion -> . valor operador valor
    (9) expresion -> . expresion_binaria
    (10) expresion -> . expresion_par
    (11) expresion -> . expresion_mul_div
    (12) expresion -> . expresion_add_sub
    (19) imprimir -> . PRINT LPAREN valores RPAREN
    (20) imprimir -> . PRINT LPAREN RPAREN
    (42) declaracion -> . VARIABLE EQUAL valor
    (23) sentenciaIf -> . IF condicion programa ELSE programa END
    (43) solicitud -> . INPUT LPAREN COMILLA STRING COMILLA RPAREN
    (44) sentenciaCase -> . CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END
    (24) sentenciaWhile -> . WHILE condicion programa END
    (25) valor -> . VARIABLE
    (26) valor -> . INTEGER
    (27) valor -> . FLOAT
    (13) expresion_binaria -> . expresion operador valor
    (14) expresion_par -> . LPAREN expresion RPAREN
    (15) expresion_mul_div -> . expresion TIMES valor
    (16) expresion_mul_div -> . expresion DIVIDE valor
    (17) expresion_add_sub -> . expresion PLUS valor
    (18) expresion_add_sub -> . expresion MINUS valor

    PRINT           shift and go to state 14
    VARIABLE        shift and go to state 16
    IF              shift and go to state 17
    INPUT           shift and go to state 18
    CASE            shift and go to state 19
    WHILE           shift and go to state 20
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    LPAREN          shift and go to state 15

    valor                          shift and go to state 9
    programa                       shift and go to state 85
    expresion                      shift and go to state 2
    imprimir                       shift and go to state 3
    declaracion                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    solicitud                      shift and go to state 6
    sentenciaCase                  shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    expresion_binaria              shift and go to state 10
    expresion_par                  shift and go to state 11
    expresion_mul_div              shift and go to state 12
    expresion_add_sub              shift and go to state 13

state 85

    (44) sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion programa ELSE programa . END

    END             shift and go to state 86


state 86

    (44) sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END .

    $end            reduce using rule 44 (sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END .)
    ELSE            reduce using rule 44 (sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END .)
    END             reduce using rule 44 (sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END .)
    WHEN            reduce using rule 44 (sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 24 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 24 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 24 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 25 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 25 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 25 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 26 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 26 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 26 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 27 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 27 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 27 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
