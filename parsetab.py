
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOLEAN BREAK COLON COMILLA COMMA DEF DIVIDE ELSE END EQUAL EQUALS EXPONENT FALSE FLOAT FOR GREATER_EQUAL_THAN GREATER_THAN HASH IF IN INPUT INTEGER IP LESS_EQUAL_THAN LESS_THAN LIST LPAREN MINUS NOT NOT_EQUALS OR PLUS POINT PRINT RETURN RPAREN SEMICOLON STRING TIMES TRUE VARIABLE WHILEprograma : expresion\n                | imprimir\n                | tupla\n                | declaracion\n                | if\n                | solicitud\n    expresion : valor operador valorimprimir : PRINT LPAREN valores RPARENimprimir : PRINT LPAREN RPARENvalores : valor\n               | valor COMMA valores\n    if : IF LPAREN condicion RPAREN COLON programa ELSE programacondicion : valor comparador valor\n    comparador : LESS_THAN\n                  | GREATER_THAN\n    valor : VARIABLE\n             | INTEGER\n             | FLOAT\n             | tupla\n             | expresion\n    operador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n    tupla : LPAREN valores RPARENdeclaracion : VARIABLE EQUAL valorsolicitud : INPUT LPAREN COMILLA STRING COMILLA RPAREN'
    
_lr_action_items = {'PRINT':([0,46,51,],[9,9,9,]),'LPAREN':([0,9,10,12,13,16,17,18,19,20,21,27,28,34,42,43,44,46,51,],[10,21,10,28,29,10,-21,-22,-23,-24,10,10,10,10,10,-14,-15,10,10,]),'VARIABLE':([0,10,16,17,18,19,20,21,27,28,34,42,43,44,46,51,],[11,24,24,-21,-22,-23,-24,24,24,24,24,24,-14,-15,11,11,]),'IF':([0,46,51,],[12,12,12,]),'INPUT':([0,46,51,],[13,13,13,]),'INTEGER':([0,10,16,17,18,19,20,21,27,28,34,42,43,44,46,51,],[14,14,14,-21,-22,-23,-24,14,14,14,14,14,-14,-15,14,14,]),'FLOAT':([0,10,16,17,18,19,20,21,27,28,34,42,43,44,46,51,],[15,15,15,-21,-22,-23,-24,15,15,15,15,15,-14,-15,15,15,]),'$end':([1,2,3,4,5,6,7,14,15,24,25,26,30,32,33,35,39,50,52,],[0,-1,-2,-3,-4,-5,-6,-17,-18,-16,-19,-20,-7,-9,-25,-26,-8,-27,-12,]),'ELSE':([2,3,4,5,6,7,14,15,24,25,26,30,32,33,35,39,49,50,52,],[-1,-2,-3,-4,-5,-6,-17,-18,-16,-19,-20,-7,-9,-25,-26,-8,51,-27,-12,]),'PLUS':([2,4,8,11,14,15,23,24,25,26,30,33,35,37,47,],[-20,-19,17,-16,-17,-18,17,-16,-19,-20,17,-25,17,17,17,]),'MINUS':([2,4,8,11,14,15,23,24,25,26,30,33,35,37,47,],[-20,-19,18,-16,-17,-18,18,-16,-19,-20,18,-25,18,18,18,]),'TIMES':([2,4,8,11,14,15,23,24,25,26,30,33,35,37,47,],[-20,-19,19,-16,-17,-18,19,-16,-19,-20,19,-25,19,19,19,]),'DIVIDE':([2,4,8,11,14,15,23,24,25,26,30,33,35,37,47,],[-20,-19,20,-16,-17,-18,20,-16,-19,-20,20,-25,20,20,20,]),'EQUAL':([11,],[27,]),'COMMA':([14,15,23,24,25,26,30,33,],[-17,-18,34,-16,-19,-20,-7,-25,]),'RPAREN':([14,15,21,22,23,24,25,26,30,31,33,36,40,47,48,],[-17,-18,32,33,-10,-16,-19,-20,-7,39,-25,41,-11,-13,50,]),'LESS_THAN':([14,15,24,25,26,30,33,37,],[-17,-18,-16,-19,-20,-7,-25,43,]),'GREATER_THAN':([14,15,24,25,26,30,33,37,],[-17,-18,-16,-19,-20,-7,-25,44,]),'COMILLA':([29,45,],[38,48,]),'STRING':([38,],[45,]),'COLON':([41,],[46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,46,51,],[1,49,52,]),'expresion':([0,10,16,21,27,28,34,42,46,51,],[2,26,26,26,26,26,26,26,2,2,]),'imprimir':([0,46,51,],[3,3,3,]),'tupla':([0,10,16,21,27,28,34,42,46,51,],[4,25,25,25,25,25,25,25,4,4,]),'declaracion':([0,46,51,],[5,5,5,]),'if':([0,46,51,],[6,6,6,]),'solicitud':([0,46,51,],[7,7,7,]),'valor':([0,10,16,21,27,28,34,42,46,51,],[8,23,30,23,35,37,23,47,8,8,]),'operador':([8,23,30,35,37,47,],[16,16,16,16,16,16,]),'valores':([10,21,34,],[22,31,40,]),'condicion':([28,],[36,]),'comparador':([37,],[42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> expresion','programa',1,'p_programa','analizador_sintactico.py',6),
  ('programa -> imprimir','programa',1,'p_programa','analizador_sintactico.py',7),
  ('programa -> tupla','programa',1,'p_programa','analizador_sintactico.py',8),
  ('programa -> declaracion','programa',1,'p_programa','analizador_sintactico.py',9),
  ('programa -> if','programa',1,'p_programa','analizador_sintactico.py',10),
  ('programa -> solicitud','programa',1,'p_programa','analizador_sintactico.py',11),
  ('expresion -> valor operador valor','expresion',3,'p_expresion','analizador_sintactico.py',16),
  ('imprimir -> PRINT LPAREN valores RPAREN','imprimir',4,'p_imprimir','analizador_sintactico.py',20),
  ('imprimir -> PRINT LPAREN RPAREN','imprimir',3,'p_imprimir_vacio','analizador_sintactico.py',24),
  ('valores -> valor','valores',1,'p_valores','analizador_sintactico.py',28),
  ('valores -> valor COMMA valores','valores',3,'p_valores','analizador_sintactico.py',29),
  ('if -> IF LPAREN condicion RPAREN COLON programa ELSE programa','if',8,'p_sentenciaIf','analizador_sintactico.py',34),
  ('condicion -> valor comparador valor','condicion',3,'p_condicion','analizador_sintactico.py',38),
  ('comparador -> LESS_THAN','comparador',1,'p_comparador','analizador_sintactico.py',43),
  ('comparador -> GREATER_THAN','comparador',1,'p_comparador','analizador_sintactico.py',44),
  ('valor -> VARIABLE','valor',1,'p_valor','analizador_sintactico.py',49),
  ('valor -> INTEGER','valor',1,'p_valor','analizador_sintactico.py',50),
  ('valor -> FLOAT','valor',1,'p_valor','analizador_sintactico.py',51),
  ('valor -> tupla','valor',1,'p_valor','analizador_sintactico.py',52),
  ('valor -> expresion','valor',1,'p_valor','analizador_sintactico.py',53),
  ('operador -> PLUS','operador',1,'p_operador','analizador_sintactico.py',58),
  ('operador -> MINUS','operador',1,'p_operador','analizador_sintactico.py',59),
  ('operador -> TIMES','operador',1,'p_operador','analizador_sintactico.py',60),
  ('operador -> DIVIDE','operador',1,'p_operador','analizador_sintactico.py',61),
  ('tupla -> LPAREN valores RPAREN','tupla',3,'p_tupla','analizador_sintactico.py',66),
  ('declaracion -> VARIABLE EQUAL valor','declaracion',3,'p_declaracion','analizador_sintactico.py',70),
  ('solicitud -> INPUT LPAREN COMILLA STRING COMILLA RPAREN','solicitud',6,'p_solicitud','analizador_sintactico.py',74),
]
