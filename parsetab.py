
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOLEAN BREAK CASE COLON COMILLA COMMA DEF DIVIDE ELSE END EQUAL EQUALS EXPONENT FALSE FLOAT FOR GREATER_EQUAL_THAN GREATER_THAN HASH IF IN INPUT INTEGER IP LESS_EQUAL_THAN LESS_THAN LIST LPAREN MINUS NOT NOT_EQUALS OR PLUS POINT PRINT RETURN RPAREN SEMICOLON STRING TIMES TRUE VARIABLE WHEN WHILEprograma : expresion\n                | imprimir\n                | tupla\n                | declaracion\n                | sentenciaIf\n                | solicitud\n    expresion : valor operador valor\n    expresion : expresion operador valor\n                 | valor\n    expresion : LPAREN expresion RPARENexpresion : expresion TIMES valor\n                 | expresion DIVIDE valor\n    expresion : expresion PLUS valor\n                 | expresion MINUS valor\n    imprimir : PRINT LPAREN valores RPARENimprimir : PRINT LPAREN RPARENvalores : valor\n               | valor COMMA valores\n    sentenciaIf : IF LPAREN condicion RPAREN COLON programa ELSE programacondicion : valor comparador valor\n    comparador : LESS_THAN\n                  | GREATER_THAN\n    valor : VARIABLE\n             | INTEGER\n             | FLOAT\n             | tupla\n    operador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n    tupla : LPAREN valores RPARENdeclaracion : VARIABLE EQUAL valorsolicitud : INPUT LPAREN COMILLA STRING COMILLA RPARENcase : CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END'
    
_lr_action_items = {'LPAREN':([0,9,10,12,13,16,17,18,19,20,21,22,23,24,25,31,32,33,36,44,55,56,57,59,64,],[9,9,31,33,34,36,36,36,36,36,36,-27,-28,-29,-30,36,36,36,36,36,36,-21,-22,9,9,]),'PRINT':([0,59,64,],[10,10,10,]),'VARIABLE':([0,9,16,17,18,19,20,21,22,23,24,25,31,32,33,36,44,55,56,57,59,64,],[11,29,29,29,29,29,29,29,-27,-28,-29,-30,29,29,29,29,29,29,-21,-22,11,11,]),'IF':([0,59,64,],[12,12,12,]),'INPUT':([0,59,64,],[13,13,13,]),'INTEGER':([0,9,16,17,18,19,20,21,22,23,24,25,31,32,33,36,44,55,56,57,59,64,],[14,14,14,14,14,14,14,14,-27,-28,-29,-30,14,14,14,14,14,14,-21,-22,14,14,]),'FLOAT':([0,9,16,17,18,19,20,21,22,23,24,25,31,32,33,36,44,55,56,57,59,64,],[15,15,15,15,15,15,15,15,-27,-28,-29,-30,15,15,15,15,15,15,-21,-22,15,15,]),'$end':([1,2,3,4,5,6,7,8,11,14,15,29,30,35,37,38,39,40,41,42,43,46,48,53,63,65,],[0,-1,-2,-3,-4,-5,-6,-9,-23,-24,-25,-23,-26,-8,-11,-12,-13,-14,-7,-10,-31,-16,-32,-15,-33,-19,]),'ELSE':([2,3,4,5,6,7,8,11,14,15,29,30,35,37,38,39,40,41,42,43,46,48,53,62,63,65,],[-1,-2,-3,-4,-5,-6,-9,-23,-24,-25,-23,-26,-8,-11,-12,-13,-14,-7,-10,-31,-16,-32,-15,64,-33,-19,]),'TIMES':([2,4,8,11,14,15,26,28,29,30,35,37,38,39,40,41,42,43,],[17,-26,24,-23,-24,-25,17,24,-23,-26,-8,-11,-12,-13,-14,-7,-10,-31,]),'DIVIDE':([2,4,8,11,14,15,26,28,29,30,35,37,38,39,40,41,42,43,],[18,-26,25,-23,-24,-25,18,25,-23,-26,-8,-11,-12,-13,-14,-7,-10,-31,]),'PLUS':([2,4,8,11,14,15,26,28,29,30,35,37,38,39,40,41,42,43,],[19,-26,22,-23,-24,-25,19,22,-23,-26,-8,-11,-12,-13,-14,-7,-10,-31,]),'MINUS':([2,4,8,11,14,15,26,28,29,30,35,37,38,39,40,41,42,43,],[20,-26,23,-23,-24,-25,20,23,-23,-26,-8,-11,-12,-13,-14,-7,-10,-31,]),'EQUAL':([11,],[32,]),'COMMA':([14,15,28,29,30,43,47,],[-24,-25,44,-23,-26,-31,44,]),'RPAREN':([14,15,26,27,28,29,30,31,35,37,38,39,40,41,42,43,45,47,49,52,60,61,],[-24,-25,42,43,-9,-23,-26,46,-8,-11,-12,-13,-14,-7,-10,-31,53,-17,54,-18,-20,63,]),'LESS_THAN':([14,15,29,30,43,50,],[-24,-25,-23,-26,-31,56,]),'GREATER_THAN':([14,15,29,30,43,50,],[-24,-25,-23,-26,-31,57,]),'COMILLA':([34,58,],[51,61,]),'STRING':([51,],[58,]),'COLON':([54,],[59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,59,64,],[1,62,65,]),'expresion':([0,9,59,64,],[2,26,2,2,]),'imprimir':([0,59,64,],[3,3,3,]),'tupla':([0,9,16,17,18,19,20,21,31,32,33,36,44,55,59,64,],[4,30,30,30,30,30,30,30,30,30,30,30,30,30,4,4,]),'declaracion':([0,59,64,],[5,5,5,]),'sentenciaIf':([0,59,64,],[6,6,6,]),'solicitud':([0,59,64,],[7,7,7,]),'valor':([0,9,16,17,18,19,20,21,31,32,33,36,44,55,59,64,],[8,28,35,37,38,39,40,41,47,48,50,47,47,60,8,8,]),'operador':([2,8,26,28,],[16,21,16,21,]),'valores':([9,31,36,44,],[27,45,27,52,]),'condicion':([33,],[49,]),'comparador':([50,],[55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> expresion','programa',1,'p_programa','analizador_sintactico.py',42),
  ('programa -> imprimir','programa',1,'p_programa','analizador_sintactico.py',43),
  ('programa -> tupla','programa',1,'p_programa','analizador_sintactico.py',44),
  ('programa -> declaracion','programa',1,'p_programa','analizador_sintactico.py',45),
  ('programa -> sentenciaIf','programa',1,'p_programa','analizador_sintactico.py',46),
  ('programa -> solicitud','programa',1,'p_programa','analizador_sintactico.py',47),
  ('expresion -> valor operador valor','expresion',3,'p_expresion','analizador_sintactico.py',52),
  ('expresion -> expresion operador valor','expresion',3,'p_expresion_binaria','analizador_sintactico.py',57),
  ('expresion -> valor','expresion',1,'p_expresion_binaria','analizador_sintactico.py',58),
  ('expresion -> LPAREN expresion RPAREN','expresion',3,'p_expresion_par','analizador_sintactico.py',62),
  ('expresion -> expresion TIMES valor','expresion',3,'p_expresion_mul_div','analizador_sintactico.py',66),
  ('expresion -> expresion DIVIDE valor','expresion',3,'p_expresion_mul_div','analizador_sintactico.py',67),
  ('expresion -> expresion PLUS valor','expresion',3,'p_expresion_add_sub','analizador_sintactico.py',72),
  ('expresion -> expresion MINUS valor','expresion',3,'p_expresion_add_sub','analizador_sintactico.py',73),
  ('imprimir -> PRINT LPAREN valores RPAREN','imprimir',4,'p_imprimir','analizador_sintactico.py',80),
  ('imprimir -> PRINT LPAREN RPAREN','imprimir',3,'p_imprimir_vacio','analizador_sintactico.py',84),
  ('valores -> valor','valores',1,'p_valores','analizador_sintactico.py',88),
  ('valores -> valor COMMA valores','valores',3,'p_valores','analizador_sintactico.py',89),
  ('sentenciaIf -> IF LPAREN condicion RPAREN COLON programa ELSE programa','sentenciaIf',8,'p_sentenciaIf','analizador_sintactico.py',94),
  ('condicion -> valor comparador valor','condicion',3,'p_condicion','analizador_sintactico.py',98),
  ('comparador -> LESS_THAN','comparador',1,'p_comparador','analizador_sintactico.py',102),
  ('comparador -> GREATER_THAN','comparador',1,'p_comparador','analizador_sintactico.py',103),
  ('valor -> VARIABLE','valor',1,'p_valor','analizador_sintactico.py',108),
  ('valor -> INTEGER','valor',1,'p_valor','analizador_sintactico.py',109),
  ('valor -> FLOAT','valor',1,'p_valor','analizador_sintactico.py',110),
  ('valor -> tupla','valor',1,'p_valor','analizador_sintactico.py',111),
  ('operador -> PLUS','operador',1,'p_operador','analizador_sintactico.py',116),
  ('operador -> MINUS','operador',1,'p_operador','analizador_sintactico.py',117),
  ('operador -> TIMES','operador',1,'p_operador','analizador_sintactico.py',118),
  ('operador -> DIVIDE','operador',1,'p_operador','analizador_sintactico.py',119),
  ('tupla -> LPAREN valores RPAREN','tupla',3,'p_tupla','analizador_sintactico.py',124),
  ('declaracion -> VARIABLE EQUAL valor','declaracion',3,'p_declaracion','analizador_sintactico.py',128),
  ('solicitud -> INPUT LPAREN COMILLA STRING COMILLA RPAREN','solicitud',6,'p_solicitud','analizador_sintactico.py',132),
  ('case -> CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END','case',11,'p_sentenciaCase','analizador_sintactico.py',135),
]
