
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOLEAN BREAK CASE COLON COMILLA COMMA DEF DIVIDE ELSE END EQUAL EQUALS EXPONENT FALSE FLOAT FOR GREATER_EQUAL_THAN GREATER_THAN HASH IF IN INPUT INTEGER IP LCOR LENGTH LESS_EQUAL_THAN LESS_THAN LIST LPAREN MINUS NIL NOT NOT_EQUALS OR PLUS POINT PRINT RCOR RETURN RPAREN SEMICOLON STRING TIMES TRUE VARIABLE WHEN WHILEprograma : expresion\n                | imprimir\n                | declaracion\n                | sentenciaIf\n                | solicitud\n                | sentenciaCase\n                | sentenciaWhile\n    expresion : valor operador valor\n                | expresion_binaria\n                | expresion_par\n                | expresion_mul_div\n                | expresion_add_sub\n    expresion_binaria : expresion operador valorexpresion_par : LPAREN expresion RPARENexpresion_mul_div : expresion TIMES valor\n                 | expresion DIVIDE valor\n    expresion_add_sub : expresion PLUS valor\n                 | expresion MINUS valor\n    imprimir : PRINT LPAREN valores RPARENimprimir : PRINT LPAREN RPARENvalores : valor\n               | valor COMMA valores\n    sentenciaIf : IF condicion programa ELSE programa ENDsentenciaWhile : WHILE condicion programa ENDvalor : VARIABLE\n             | INTEGER\n             | FLOAT\n    operador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n    condicion : valor comparador valor\n                 | condicion conector condicion\n    comparador : LESS_THAN\n                  | GREATER_THAN\n                  | EQUALS\n                  | NOT_EQUALS\n                  | LESS_EQUAL_THAN\n                  | GREATER_EQUAL_THAN\n    conector : AND\n                | OR\n    declaracion : VARIABLE EQUAL valorsolicitud : INPUT LPAREN COMILLA STRING COMILLA RPARENsentenciaCase : CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END'
    
_lr_action_items = {'PRINT':([0,21,22,35,37,41,69,70,71,73,82,84,],[14,-26,-27,-25,14,14,14,-33,-32,14,14,14,]),'VARIABLE':([0,15,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,41,54,55,56,57,58,59,60,61,62,63,65,68,69,70,71,73,81,82,84,],[16,35,35,35,35,-26,-27,35,35,35,35,35,35,-28,-29,-30,-31,35,-25,35,16,16,35,-40,-41,35,-34,-35,-36,-37,-38,-39,35,35,16,-33,-32,16,35,16,16,]),'IF':([0,21,22,35,37,41,69,70,71,73,82,84,],[17,-26,-27,-25,17,17,17,-33,-32,17,17,17,]),'INPUT':([0,21,22,35,37,41,69,70,71,73,82,84,],[18,-26,-27,-25,18,18,18,-33,-32,18,18,18,]),'CASE':([0,21,22,35,37,41,69,70,71,73,82,84,],[19,-26,-27,-25,19,19,19,-33,-32,19,19,19,]),'WHILE':([0,21,22,35,37,41,69,70,71,73,82,84,],[20,-26,-27,-25,20,20,20,-33,-32,20,20,20,]),'INTEGER':([0,15,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,41,54,55,56,57,58,59,60,61,62,63,65,68,69,70,71,73,81,82,84,],[21,21,21,21,21,-26,-27,21,21,21,21,21,21,-28,-29,-30,-31,21,-25,21,21,21,21,-40,-41,21,-34,-35,-36,-37,-38,-39,21,21,21,-33,-32,21,21,21,21,]),'FLOAT':([0,15,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,41,54,55,56,57,58,59,60,61,62,63,65,68,69,70,71,73,81,82,84,],[22,22,22,22,22,-26,-27,22,22,22,22,22,22,-28,-29,-30,-31,22,-25,22,22,22,22,-40,-41,22,-34,-35,-36,-37,-38,-39,22,22,22,-33,-32,22,22,22,22,]),'LPAREN':([0,14,15,18,21,22,35,37,41,69,70,71,73,82,84,],[15,33,15,39,-26,-27,-25,15,15,15,-33,-32,15,15,15,]),'$end':([1,2,3,4,5,6,7,8,10,11,12,13,21,22,35,42,43,44,45,46,47,49,51,52,67,74,79,80,86,],[0,-1,-2,-3,-4,-5,-6,-7,-9,-10,-11,-12,-26,-27,-25,-13,-15,-16,-17,-18,-8,-20,-14,-42,-19,-24,-23,-43,-44,]),'ELSE':([2,3,4,5,6,7,8,10,11,12,13,21,22,35,42,43,44,45,46,47,49,51,52,53,67,74,79,80,83,86,],[-1,-2,-3,-4,-5,-6,-7,-9,-10,-11,-12,-26,-27,-25,-13,-15,-16,-17,-18,-8,-20,-14,-42,69,-19,-24,-23,-43,84,-44,]),'END':([2,3,4,5,6,7,8,10,11,12,13,21,22,35,42,43,44,45,46,47,49,51,52,66,67,74,76,79,80,85,86,],[-1,-2,-3,-4,-5,-6,-7,-9,-10,-11,-12,-26,-27,-25,-13,-15,-16,-17,-18,-8,-20,-14,-42,74,-19,-24,79,-23,-43,86,-44,]),'WHEN':([2,3,4,5,6,7,8,10,11,12,13,21,22,35,40,42,43,44,45,46,47,49,51,52,67,74,78,79,80,86,],[-1,-2,-3,-4,-5,-6,-7,-9,-10,-11,-12,-26,-27,-25,65,-13,-15,-16,-17,-18,-8,-20,-14,-42,-19,-24,81,-23,-43,-44,]),'TIMES':([2,9,10,11,12,13,16,21,22,34,35,42,43,44,45,46,47,51,],[24,31,-9,-10,-11,-12,-25,-26,-27,24,-25,-13,-15,-16,-17,-18,-8,-14,]),'DIVIDE':([2,9,10,11,12,13,16,21,22,34,35,42,43,44,45,46,47,51,],[25,32,-9,-10,-11,-12,-25,-26,-27,25,-25,-13,-15,-16,-17,-18,-8,-14,]),'PLUS':([2,9,10,11,12,13,16,21,22,34,35,42,43,44,45,46,47,51,],[26,29,-9,-10,-11,-12,-25,-26,-27,26,-25,-13,-15,-16,-17,-18,-8,-14,]),'MINUS':([2,9,10,11,12,13,16,21,22,34,35,42,43,44,45,46,47,51,],[27,30,-9,-10,-11,-12,-25,-26,-27,27,-25,-13,-15,-16,-17,-18,-8,-14,]),'RPAREN':([10,11,12,13,21,22,33,34,35,42,43,44,45,46,47,48,50,51,75,77,],[-9,-10,-11,-12,-26,-27,49,51,-25,-13,-15,-16,-17,-18,-8,67,-21,-14,-22,80,]),'EQUAL':([16,],[36,]),'LESS_THAN':([21,22,35,38,],[-26,-27,-25,58,]),'GREATER_THAN':([21,22,35,38,],[-26,-27,-25,59,]),'EQUALS':([21,22,35,38,],[-26,-27,-25,60,]),'NOT_EQUALS':([21,22,35,38,],[-26,-27,-25,61,]),'LESS_EQUAL_THAN':([21,22,35,38,],[-26,-27,-25,62,]),'GREATER_EQUAL_THAN':([21,22,35,38,],[-26,-27,-25,63,]),'COMMA':([21,22,35,50,],[-26,-27,-25,68,]),'AND':([21,22,35,37,41,70,71,73,82,],[-26,-27,-25,55,55,55,-32,55,55,]),'OR':([21,22,35,37,41,70,71,73,82,],[-26,-27,-25,56,56,56,-32,56,56,]),'COMILLA':([39,72,],[64,77,]),'STRING':([64,],[72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,37,41,69,73,82,84,],[1,53,66,76,78,83,85,]),'expresion':([0,15,37,41,69,73,82,84,],[2,34,2,2,2,2,2,2,]),'imprimir':([0,37,41,69,73,82,84,],[3,3,3,3,3,3,3,]),'declaracion':([0,37,41,69,73,82,84,],[4,4,4,4,4,4,4,]),'sentenciaIf':([0,37,41,69,73,82,84,],[5,5,5,5,5,5,5,]),'solicitud':([0,37,41,69,73,82,84,],[6,6,6,6,6,6,6,]),'sentenciaCase':([0,37,41,69,73,82,84,],[7,7,7,7,7,7,7,]),'sentenciaWhile':([0,37,41,69,73,82,84,],[8,8,8,8,8,8,8,]),'valor':([0,15,17,19,20,23,24,25,26,27,28,33,36,37,41,54,57,65,68,69,73,81,82,84,],[9,9,38,40,38,42,43,44,45,46,47,50,52,9,9,38,71,38,50,9,9,38,9,9,]),'expresion_binaria':([0,15,37,41,69,73,82,84,],[10,10,10,10,10,10,10,10,]),'expresion_par':([0,15,37,41,69,73,82,84,],[11,11,11,11,11,11,11,11,]),'expresion_mul_div':([0,15,37,41,69,73,82,84,],[12,12,12,12,12,12,12,12,]),'expresion_add_sub':([0,15,37,41,69,73,82,84,],[13,13,13,13,13,13,13,13,]),'operador':([2,9,34,],[23,28,23,]),'condicion':([17,20,54,65,81,],[37,41,70,73,82,]),'valores':([33,68,],[48,75,]),'conector':([37,41,70,73,82,],[54,54,54,54,54,]),'comparador':([38,],[57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> expresion','programa',1,'p_programa','analizador_sintactico.py',28),
  ('programa -> imprimir','programa',1,'p_programa','analizador_sintactico.py',29),
  ('programa -> declaracion','programa',1,'p_programa','analizador_sintactico.py',30),
  ('programa -> sentenciaIf','programa',1,'p_programa','analizador_sintactico.py',31),
  ('programa -> solicitud','programa',1,'p_programa','analizador_sintactico.py',32),
  ('programa -> sentenciaCase','programa',1,'p_programa','analizador_sintactico.py',33),
  ('programa -> sentenciaWhile','programa',1,'p_programa','analizador_sintactico.py',34),
  ('expresion -> valor operador valor','expresion',3,'p_expresion','analizador_sintactico.py',39),
  ('expresion -> expresion_binaria','expresion',1,'p_expresion','analizador_sintactico.py',40),
  ('expresion -> expresion_par','expresion',1,'p_expresion','analizador_sintactico.py',41),
  ('expresion -> expresion_mul_div','expresion',1,'p_expresion','analizador_sintactico.py',42),
  ('expresion -> expresion_add_sub','expresion',1,'p_expresion','analizador_sintactico.py',43),
  ('expresion_binaria -> expresion operador valor','expresion_binaria',3,'p_expresion_binaria','analizador_sintactico.py',48),
  ('expresion_par -> LPAREN expresion RPAREN','expresion_par',3,'p_expresion_par','analizador_sintactico.py',51),
  ('expresion_mul_div -> expresion TIMES valor','expresion_mul_div',3,'p_expresion_mul_div','analizador_sintactico.py',55),
  ('expresion_mul_div -> expresion DIVIDE valor','expresion_mul_div',3,'p_expresion_mul_div','analizador_sintactico.py',56),
  ('expresion_add_sub -> expresion PLUS valor','expresion_add_sub',3,'p_expresion_add_sub','analizador_sintactico.py',61),
  ('expresion_add_sub -> expresion MINUS valor','expresion_add_sub',3,'p_expresion_add_sub','analizador_sintactico.py',62),
  ('imprimir -> PRINT LPAREN valores RPAREN','imprimir',4,'p_imprimir','analizador_sintactico.py',69),
  ('imprimir -> PRINT LPAREN RPAREN','imprimir',3,'p_imprimir_vacio','analizador_sintactico.py',73),
  ('valores -> valor','valores',1,'p_valores','analizador_sintactico.py',77),
  ('valores -> valor COMMA valores','valores',3,'p_valores','analizador_sintactico.py',78),
  ('sentenciaIf -> IF condicion programa ELSE programa END','sentenciaIf',6,'p_sentenciaIf','analizador_sintactico.py',83),
  ('sentenciaWhile -> WHILE condicion programa END','sentenciaWhile',4,'p_sentenciaWhile','analizador_sintactico.py',86),
  ('valor -> VARIABLE','valor',1,'p_valor','analizador_sintactico.py',89),
  ('valor -> INTEGER','valor',1,'p_valor','analizador_sintactico.py',90),
  ('valor -> FLOAT','valor',1,'p_valor','analizador_sintactico.py',91),
  ('operador -> PLUS','operador',1,'p_operador','analizador_sintactico.py',96),
  ('operador -> MINUS','operador',1,'p_operador','analizador_sintactico.py',97),
  ('operador -> TIMES','operador',1,'p_operador','analizador_sintactico.py',98),
  ('operador -> DIVIDE','operador',1,'p_operador','analizador_sintactico.py',99),
  ('condicion -> valor comparador valor','condicion',3,'p_condicion','analizador_sintactico.py',104),
  ('condicion -> condicion conector condicion','condicion',3,'p_condicion','analizador_sintactico.py',105),
  ('comparador -> LESS_THAN','comparador',1,'p_comparador','analizador_sintactico.py',109),
  ('comparador -> GREATER_THAN','comparador',1,'p_comparador','analizador_sintactico.py',110),
  ('comparador -> EQUALS','comparador',1,'p_comparador','analizador_sintactico.py',111),
  ('comparador -> NOT_EQUALS','comparador',1,'p_comparador','analizador_sintactico.py',112),
  ('comparador -> LESS_EQUAL_THAN','comparador',1,'p_comparador','analizador_sintactico.py',113),
  ('comparador -> GREATER_EQUAL_THAN','comparador',1,'p_comparador','analizador_sintactico.py',114),
  ('conector -> AND','conector',1,'p_conector','analizador_sintactico.py',118),
  ('conector -> OR','conector',1,'p_conector','analizador_sintactico.py',119),
  ('declaracion -> VARIABLE EQUAL valor','declaracion',3,'p_declaracion','analizador_sintactico.py',122),
  ('solicitud -> INPUT LPAREN COMILLA STRING COMILLA RPAREN','solicitud',6,'p_solicitud','analizador_sintactico.py',126),
  ('sentenciaCase -> CASE valor WHEN condicion programa WHEN condicion programa ELSE programa END','sentenciaCase',11,'p_sentenciaCase','analizador_sintactico.py',129),
]
