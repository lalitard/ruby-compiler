
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOLEAN BREAK CASE COLON COMILLA COMMA DEF DIVIDE ELSE END EQUAL EQUALS EXPONENT FALSE FLOAT FOR GREATER_EQUAL_THAN GREATER_THAN HASH IF IN INTEGER IP LCOR LENGTH LESS_EQUAL_THAN LESS_THAN LIST LPAREN MINUS NOT NOT_EQUALS OR PLUS POINT PRINT RCOR RETURN RPAREN SEMICOLON STRING TIMES TRUE VARIABLE WHEN WHILEprograma : expresion\n                | list\n                | length_list\n                | declaracionexpresion : valor operador valordeclaracion : VARIABLE EQUAL valor\n                  | VARIABLE EQUAL LISTlist : LCOR valores RCORvalores : valor\n              | valor COMMA valorescondicion : valor comparador valor\n                 | condicion conector condicion\n    valor : VARIABLE\n             | INTEGER\n             | FLOAT\n             | expresion\n    operador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n    comparador : LESS_THAN\n                  | GREATER_THAN\n                  | EQUALS\n                  | NOT_EQUALS\n                  | LESS_EQUAL_THAN\n                  | GREATER_EQUAL_THAN\n    conector : AND\n                | OR\n    length_list : valor POINT LENGTH'
    
_lr_action_items = {'LCOR':([0,],[7,]),'VARIABLE':([0,7,11,13,14,15,16,21,25,],[8,19,19,-17,-18,-19,-20,19,19,]),'INTEGER':([0,7,11,13,14,15,16,21,25,],[9,9,9,-17,-18,-19,-20,9,9,]),'FLOAT':([0,7,11,13,14,15,16,21,25,],[10,10,10,-17,-18,-19,-20,10,10,]),'$end':([1,2,3,4,5,9,10,19,20,22,23,24,26,27,],[0,-1,-2,-3,-4,-14,-15,-13,-16,-5,-29,-8,-6,-7,]),'POINT':([2,6,8,9,10,19,20,22,],[-16,12,-13,-14,-15,-13,-16,-5,]),'PLUS':([2,6,8,9,10,18,19,20,22,26,],[-16,13,-13,-14,-15,13,-13,-16,13,13,]),'MINUS':([2,6,8,9,10,18,19,20,22,26,],[-16,14,-13,-14,-15,14,-13,-16,14,14,]),'TIMES':([2,6,8,9,10,18,19,20,22,26,],[-16,15,-13,-14,-15,15,-13,-16,15,15,]),'DIVIDE':([2,6,8,9,10,18,19,20,22,26,],[-16,16,-13,-14,-15,16,-13,-16,16,16,]),'EQUAL':([8,],[21,]),'COMMA':([9,10,18,19,20,22,],[-14,-15,25,-13,-16,-5,]),'RCOR':([9,10,17,18,19,20,22,28,],[-14,-15,24,-9,-13,-16,-5,-10,]),'LENGTH':([12,],[23,]),'LIST':([21,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'expresion':([0,7,11,21,25,],[2,20,20,20,20,]),'list':([0,],[3,]),'length_list':([0,],[4,]),'declaracion':([0,],[5,]),'valor':([0,7,11,21,25,],[6,18,22,26,18,]),'operador':([6,18,22,26,],[11,11,11,11,]),'valores':([7,25,],[17,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> expresion','programa',1,'p_programa','analizador_semantico.py',12),
  ('programa -> list','programa',1,'p_programa','analizador_semantico.py',13),
  ('programa -> length_list','programa',1,'p_programa','analizador_semantico.py',14),
  ('programa -> declaracion','programa',1,'p_programa','analizador_semantico.py',15),
  ('expresion -> valor operador valor','expresion',3,'p_expresion','analizador_semantico.py',19),
  ('declaracion -> VARIABLE EQUAL valor','declaracion',3,'p_declaracion','analizador_semantico.py',35),
  ('declaracion -> VARIABLE EQUAL LIST','declaracion',3,'p_declaracion','analizador_semantico.py',36),
  ('list -> LCOR valores RCOR','list',3,'p_list','analizador_semantico.py',40),
  ('valores -> valor','valores',1,'p_valores','analizador_semantico.py',45),
  ('valores -> valor COMMA valores','valores',3,'p_valores','analizador_semantico.py',46),
  ('condicion -> valor comparador valor','condicion',3,'p_condicion','analizador_semantico.py',54),
  ('condicion -> condicion conector condicion','condicion',3,'p_condicion','analizador_semantico.py',55),
  ('valor -> VARIABLE','valor',1,'p_valor','analizador_semantico.py',60),
  ('valor -> INTEGER','valor',1,'p_valor','analizador_semantico.py',61),
  ('valor -> FLOAT','valor',1,'p_valor','analizador_semantico.py',62),
  ('valor -> expresion','valor',1,'p_valor','analizador_semantico.py',63),
  ('operador -> PLUS','operador',1,'p_operador','analizador_semantico.py',72),
  ('operador -> MINUS','operador',1,'p_operador','analizador_semantico.py',73),
  ('operador -> TIMES','operador',1,'p_operador','analizador_semantico.py',74),
  ('operador -> DIVIDE','operador',1,'p_operador','analizador_semantico.py',75),
  ('comparador -> LESS_THAN','comparador',1,'p_comparador','analizador_semantico.py',78),
  ('comparador -> GREATER_THAN','comparador',1,'p_comparador','analizador_semantico.py',79),
  ('comparador -> EQUALS','comparador',1,'p_comparador','analizador_semantico.py',80),
  ('comparador -> NOT_EQUALS','comparador',1,'p_comparador','analizador_semantico.py',81),
  ('comparador -> LESS_EQUAL_THAN','comparador',1,'p_comparador','analizador_semantico.py',82),
  ('comparador -> GREATER_EQUAL_THAN','comparador',1,'p_comparador','analizador_semantico.py',83),
  ('conector -> AND','conector',1,'p_conector','analizador_semantico.py',87),
  ('conector -> OR','conector',1,'p_conector','analizador_semantico.py',88),
  ('length_list -> valor POINT LENGTH','length_list',3,'p_length_list','analizador_semantico.py',96),
]
